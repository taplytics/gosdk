/*
 * Taplytics Universal API
 *
 * The Taplytics Universal API is an API to quickly use Taplytics features and functionality at edge. This API allows the utilization of the Taplytics experimentation  functionality anywhere in the stack, both client- and server-side.  Each call to the Universal API requires two main parameters: token and user_id. - token is unique to each Taplytics project and can be found under Settings -> Project Settings -> Taplytics SDK Key - user_id is your custom defined user ID.  To be able to utilize the Universal API, please ensure that your Taplytics project is setup for usage. You may contact your Account Manager or support@taplytics.com for any questions.
 *
 * API version: 1.1
 * Contact: support@taplytics.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// VariationsApiService VariationsApi service
type VariationsApiService service

type ApiVariationGetRequest struct {
	ctx _context.Context
	ApiService *VariationsApiService
	token *string
	userId *string
	experimentName *string
	attributes *UserAttributes
	customData *map[string]interface{}
}

func (r ApiVariationGetRequest) Token(token string) ApiVariationGetRequest {
	r.token = &token
	return r
}
func (r ApiVariationGetRequest) UserId(userId string) ApiVariationGetRequest {
	r.userId = &userId
	return r
}
func (r ApiVariationGetRequest) ExperimentName(experimentName string) ApiVariationGetRequest {
	r.experimentName = &experimentName
	return r
}
func (r ApiVariationGetRequest) Attributes(attributes UserAttributes) ApiVariationGetRequest {
	r.attributes = &attributes
	return r
}
func (r ApiVariationGetRequest) CustomData(customData map[string]interface{}) ApiVariationGetRequest {
	r.customData = &customData
	return r
}

func (r ApiVariationGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.VariationGetExecute(r)
}

/*
 * VariationGet Get Variation for a Taplytics Experiment
 * For a given experiment, determine whether or not a user is in the experiment, and in which variation.  If the user is not in the experiment, returns an empty response.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiVariationGetRequest
 */
func (a *VariationsApiService) VariationGet(ctx _context.Context) ApiVariationGetRequest {
	return ApiVariationGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *VariationsApiService) VariationGetExecute(r ApiVariationGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariationsApiService.VariationGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.token == nil {
		return nil, reportError("token is required and must be specified")
	}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}
	if r.experimentName == nil {
		return nil, reportError("experimentName is required and must be specified")
	}
	if r.attributes == nil {
		return nil, reportError("attributes is required and must be specified")
	}
	if r.customData == nil {
		return nil, reportError("customData is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("user_id", parameterToString(*r.userId, ""))
	localVarQueryParams.Add("experimentName", parameterToString(*r.experimentName, ""))
	localVarQueryParams.Add("attributes", parameterToString(*r.attributes, ""))
	localVarQueryParams.Add("customData", parameterToString(*r.customData, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVariationPostRequest struct {
	ctx _context.Context
	ApiService *VariationsApiService
	token *string
	userId *string
	experimentName *string
	userAttributesWithCustomData *UserAttributesWithCustomData
}

func (r ApiVariationPostRequest) Token(token string) ApiVariationPostRequest {
	r.token = &token
	return r
}
func (r ApiVariationPostRequest) UserId(userId string) ApiVariationPostRequest {
	r.userId = &userId
	return r
}
func (r ApiVariationPostRequest) ExperimentName(experimentName string) ApiVariationPostRequest {
	r.experimentName = &experimentName
	return r
}
func (r ApiVariationPostRequest) UserAttributesWithCustomData(userAttributesWithCustomData UserAttributesWithCustomData) ApiVariationPostRequest {
	r.userAttributesWithCustomData = &userAttributesWithCustomData
	return r
}

func (r ApiVariationPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.VariationPostExecute(r)
}

/*
 * VariationPost Get Variation for a Taplytics Experiment
 * For a given experiment, determine whether or not a user is in the experiment, and in which variation.  If the user is not in the experiment, returns an empty response.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiVariationPostRequest
 */
func (a *VariationsApiService) VariationPost(ctx _context.Context) ApiVariationPostRequest {
	return ApiVariationPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *VariationsApiService) VariationPostExecute(r ApiVariationPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VariationsApiService.VariationPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/variation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.token == nil {
		return nil, reportError("token is required and must be specified")
	}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}
	if r.experimentName == nil {
		return nil, reportError("experimentName is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("user_id", parameterToString(*r.userId, ""))
	localVarQueryParams.Add("experimentName", parameterToString(*r.experimentName, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/jason"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userAttributesWithCustomData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
