/*
 * Taplytics Universal API
 *
 * The Taplytics Universal API is an API to quickly use Taplytics features and functionality at edge. This API allows the utilization of the Taplytics experimentation  functionality anywhere in the stack, both client- and server-side.  Each call to the Universal API requires two main parameters: token and user_id. - token is unique to each Taplytics project and can be found under Settings -> Project Settings -> Taplytics SDK Key - user_id is your custom defined user ID.  To be able to utilize the Universal API, please ensure that your Taplytics project is setup for usage. You may contact your Account Manager or support@taplytics.com for any questions.
 *
 * API version: 1.1
 * Contact: support@taplytics.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gosdk

import (
	"encoding/json"
)

// UserAttributesWithCustomData struct for UserAttributesWithCustomData
type UserAttributesWithCustomData struct {
	Attributes *UserAttributes `json:"attributes,omitempty"`
}

// NewUserAttributesWithCustomData instantiates a new UserAttributesWithCustomData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAttributesWithCustomData() *UserAttributesWithCustomData {
	this := UserAttributesWithCustomData{}
	return &this
}

// NewUserAttributesWithCustomDataWithDefaults instantiates a new UserAttributesWithCustomData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAttributesWithCustomDataWithDefaults() *UserAttributesWithCustomData {
	this := UserAttributesWithCustomData{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *UserAttributesWithCustomData) GetAttributes() UserAttributes {
	if o == nil || o.Attributes == nil {
		var ret UserAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAttributesWithCustomData) GetAttributesOk() (*UserAttributes, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *UserAttributesWithCustomData) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given UserAttributes and assigns it to the Attributes field.
func (o *UserAttributesWithCustomData) SetAttributes(v UserAttributes) {
	o.Attributes = &v
}

func (o UserAttributesWithCustomData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableUserAttributesWithCustomData struct {
	value *UserAttributesWithCustomData
	isSet bool
}

func (v NullableUserAttributesWithCustomData) Get() *UserAttributesWithCustomData {
	return v.value
}

func (v *NullableUserAttributesWithCustomData) Set(val *UserAttributesWithCustomData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAttributesWithCustomData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAttributesWithCustomData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAttributesWithCustomData(val *UserAttributesWithCustomData) *NullableUserAttributesWithCustomData {
	return &NullableUserAttributesWithCustomData{value: val, isSet: true}
}

func (v NullableUserAttributesWithCustomData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAttributesWithCustomData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
